#!/usr/bin/env python3

import argparse
import os
import yaml
from pathlib import Path

PROJECT_DIR = Path(__file__).resolve().parent.parent

# Peg to project dir so we can run cli tool from anywhere
DC_BTC = f'docker-compose --file={PROJECT_DIR}/bitcoin/docker-compose.yml'
DC_ETH = f'docker-compose --file={PROJECT_DIR}/ethereum/docker-compose.yml'
# Parse service yaml file
with open(f'{PROJECT_DIR}/bitcoin/docker-compose.yml') as f:
    compose = yaml.load(f.read(), Loader=yaml.FullLoader)
SERVICE_LIST = [s for s in compose['services'].keys()]


class CryptoCLI(object):

    def __init__(self):
        parser = self.build_parser()
        args = parser.parse_args()
        if 'func' in args:
            args.func(args)
        else:
            parser.print_help()
            print('')

    def build_parser(self):
        desc = 'toolbelt for the crypto project'
        parser = argparse.ArgumentParser(prog='crypto', description=desc)
        subparsers = parser.add_subparsers(title='subcommands', metavar='')

        # --- ssh --------------------------------------------------
        p = subparsers.add_parser('ssh', help='ssh into a running service container')
        p.add_argument('service', choices=SERVICE_LIST, nargs='?', default='bitcoind')
        p.set_defaults(func=lambda args: os.system(f'{DC_BTC} exec {args.service} bash'))
        
        # --- ps --------------------------------------------------
        p = subparsers.add_parser('ps', help='list running containers')
        p.set_defaults(func=self.ps)

        # --- logs --------------------------------------------------
        p = subparsers.add_parser(
            'logs',
            help='tail logs of one or more running service containers',
            description='follow the logs of one or more running services. Don\'t specify any services to tail all running services. Specify one or more to constrain the list',
            usage='\n\tcrypto logs\n\tcrypto logs service_name1 service_name2')
        p.add_argument('services', choices=SERVICE_LIST + [''], nargs='*', default='')
        p.add_argument('-n', '--lines', default=20, help='output the last n lines before starting follow')
        p.set_defaults(func=lambda args: os.system(f'{DC_BTC} logs --tail={args.lines} -f {" ".join(args.services)}'))

        return parser
    
    def ps(self, args):
        os.chdir(PROJECT_DIR)
        os.system(f'{DC_BTC} ps') 
        os.system(f'{DC_ETH} ps')        


if __name__ == '__main__':
    r = CryptoCLI()